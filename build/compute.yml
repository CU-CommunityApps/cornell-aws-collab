AWSTemplateFormatVersion: '2010-09-09'
Description: 'Standard VPC Template'

Parameters:
  
  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
    
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'

  BuildRole:
    Description: 'ARN of the CodeBuild Role'
    Type: 'String'

Outputs:

  # ECS Environment
  
  EcsCluster:
    Value: !Sub '${EcsCluster}'

  EcsTaskExecutionRole:
    Value: !Sub '${EcsTaskExecutionRole.Arn}'

  EcsLogGroup: 
    Value: !Sub '${EcsLogGroup}'

  EcsRepository:
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}'

  # Batch Environment
  
  BatchServiceRole:
    Value: !Sub '${BatchServiceRole.Arn}'
  
  SpotFleetServiceRole:
    Value: !Sub '${SpotFleetServiceRole.Arn}'
  
  BatchInstanceRole:
    Value: !Sub '${BatchInstanceRole.Arn}'
  
  BatchInstanceProfile:
    Value: !Sub '${BatchInstanceProfile.Arn}'
  
  BatchJobQueue:
    Value: !Sub '${BatchJobQueue}'
  
  # EFS
  
  FileSystem:
    Value: !Sub '${FileSystem}.efs.${AWS::Region}.${AWS::URLSuffix}'

  # VPC

  Vpc:
    Value: !Sub '${Vpc}'
  
  DefaultSecurityGroup:
    Value: !Sub '${Vpc.DefaultSecurityGroup}'
  
  SubnetA:
    Value: !Sub '${SubnetA}'

  SubnetB:
    Value: !Sub '${SubnetB}'

  SubnetC:
    Value: !Sub '${SubnetC}'

  SubnetD:
    Value: !Sub '${SubnetD}'

  SubnetE:
    Value: !Sub '${SubnetE}'

  SubnetF:
    Value: !Sub '${SubnetF}'

Resources:

  # ECS Environment

  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings: 
        - Name: 'containerInsights'
          Value: 'disabled'
      Tags: 
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-ecs-cluster'

  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-ecs-task-execution-role'

  EcsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${Application}/${Environment}/ecs'
      RetentionInDays: 14

  EcsRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !Sub '${BatchInstanceRole.Arn}'
                - !Sub '${EcsTaskExecutionRole.Arn}'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '${BuildRole}'
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DescribeImages'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
      LifecyclePolicy:
        LifecyclePolicyText: |-
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1,
                  "tagStatus": "untagged"
                },
                "description": "Expire Untagged Images",
                "rulePriority": 1
              }
            ]
          }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-ecs-respository'

  # Batch Roles

  BatchServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'batch.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSBatchServiceRole'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-batch-instance-role'

  SpotFleetServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'spotfleet.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-batch-instance-role'

  BatchInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ec2.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-batch-instance-role'

  BatchInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Sub '${BatchInstanceRole}'

  # Batch Environment
  
  BatchComputeEnvironment:
    Type: 'AWS::Batch::ComputeEnvironment'
    Properties:
      State: 'ENABLED'
      Type: 'MANAGED'
      ServiceRole: !Sub '${BatchServiceRole.Arn}'
      ComputeResources:
        Type: 'SPOT'
        DesiredvCpus: 0
        MaxvCpus: 10
        MinvCpus: 0
        InstanceRole: !Sub '${BatchInstanceProfile.Arn}'
        SpotIamFleetRole: !Sub '${SpotFleetServiceRole.Arn}'
        InstanceTypes:
          - 'm3.medium'
        SecurityGroupIds:
          - !Sub '${Vpc.DefaultSecurityGroup}'
        Subnets:
          - !Sub '${SubnetA}'
          - !Sub '${SubnetB}'
          - !Sub '${SubnetC}'
          - !Sub '${SubnetD}'
          - !Sub '${SubnetE}'
          - !Sub '${SubnetF}'
        Tags: 
          Application: !Sub '${Application}'
          Environment: !Sub '${Environment}'
          Resource: !Sub '${Application}-${Environment}-batch-compute'
          Name: !Sub '${Application}-${Environment}-batch-compute'

  BatchJobQueue:
    Type: 'AWS::Batch::JobQueue'
    Properties:
      State: 'ENABLED'
      Priority: 100
      ComputeEnvironmentOrder:
        - ComputeEnvironment: !Sub '${BatchComputeEnvironment}'
          Order: 1

  # EFS
  
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'
      FileSystemTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-filesystem'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'

  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetA}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetB}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetC:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetC}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetD:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetD}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetE:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetE}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetF:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetF}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  # VPC

  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-vpc'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-igw'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Sub '${InternetGateway}'
      VpcId: !Sub '${Vpc}'

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-rtb'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Sub '${InternetGateway}'
      RouteTableId: !Sub '${RouteTable}'
  
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: '10.0.0.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-a'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-a'
  
  SubnetRouteA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetA}'
  
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: '10.0.32.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-subnet-b'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-b'
  
  SubnetRouteB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetB}'
  
  SubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      CidrBlock: '10.0.64.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-subnet-c'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-c'
  
  SubnetRouteC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetC}'
  
  SubnetD:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 3
          - Fn::GetAZs: ''
      CidrBlock: '10.0.96.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-subnet-d'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-d'
  
  SubnetRouteD:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetD}'
  
  SubnetE:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 4
          - Fn::GetAZs: ''
      CidrBlock: '10.0.128.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-subnet-e'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-e'
  
  SubnetRouteE:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetE}'
  
  SubnetF:
    Type: 'AWS::EC2::Subnet'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 5
          - Fn::GetAZs: ''
      CidrBlock: '10.0.160.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-subnet-f'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-f'
  
  SubnetRouteF:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetF}'
  