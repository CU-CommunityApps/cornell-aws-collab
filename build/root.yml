AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ''

Parameters:

  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
  
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
    
  DomainName:
    Description: 'The base domain name for the website'
    Type: 'String'
    
  GitHubRepo:
    Description: 'The GitHub repository for this application'
    Type: 'String'
  
  AdminEmail:
    Description: 'Email to which administrative alerts are sent'
    Type: 'String'
  
  AdminPhone:
    Description: 'Mobile phone to which administrative alerts are sent via SMS'
    Type: 'String'
    
Outputs:

  EcsRepository:
    Value: !Sub '${ComputeStack.Outputs.EcsRepository}'

  Api:
    Value: !Sub '${Api}'
  
  WebBucket:
    Value: !Sub '${WebStack.Outputs.WebBucket}'

  BuildProject:
    Value: !Sub '${BuildProject}'

Globals:
  
  Function:
    Handler: 'entry.lambda_handler'
    MemorySize: 128
    Runtime: 'python3.8'
    Timeout: 900
    Tags:
      Application: !Sub '${Application}'
      Environment: !Sub '${Environment}'
    Environment:
      Variables:
        APPLICATION: !Sub '${Application}'
        ENVIRONMENT: !Sub '${Environment}'
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        
Resources:

  # Containers
  
  ExampleTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}--task-role'
  
  ExampleBatchJobDefinition:
    Type: 'AWS::Batch::JobDefinition'
    Properties:
      Type: 'container'
      ContainerProperties:
        Environment:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'AWS_ACCOUNT_ID'
            Value: !Sub '${AWS::AccountId}'
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ComputeStack.Outputs.EcsRepository}:Example'
        JobRoleArn: !Sub '${ExampleTaskRole.Arn}'
        Privileged: true
        Memory: 1536
        Vcpus: 1
      RetryStrategy:
        Attempts: 2

  ExampleFargateDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Sub '${ComputeStack.Outputs.EcsTaskExecutionRole}'
      NetworkMode: 'awsvpc'
      TaskRoleArn: !Sub '${ExampleTaskRole.Arn}'
      RequiresCompatibilities: 
        - 'FARGATE'
      ContainerDefinitions:
        - Name: 'example'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ComputeStack.Outputs.EcsRepository}:Example'
          Essential: true
          # Environment:
          #   - Name: ''
          #     Value: !Sub ''
          # Secrets:
          #   - Name: ''
          #     ValueFrom: !Sub '/${Application}/${Environment}/'
          LogConfiguration: 
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Sub '${AWS::Region}'
              awslogs-group: !Sub '${ComputeStack.Outputs.EcsLogGroup}'
              awslogs-stream-prefix: 'example'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-example-ecs-task'

  # Api
  
  Api:
    Type: 'AWS::Serverless::Api'
    Properties:
      EndpointConfiguration: 'REGIONAL'
      StageName: 'api'
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub '${Application}-${Environment}'
        securityDefinitions:
          api_key:
            type: 'apiKey'
            name: 'x-api-key'
            in: 'header'
        paths:
          '/example':
            get:
              # security:
              #   - api_key: []
              x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                responses: { }
                uri:
                  !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExampleFunction.Arn}/invocations'

  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: 
      - 'ApiapiStage'
    Properties:
      UsagePlanName: !Sub '${Application}-${Environment}'
      Description: !Sub 'Usage Plan for ${Application}-${Environment}'
      ApiStages:
        - ApiId: !Sub '${Api}'
          Stage: 'api'
          #Throttle:
      #Quota:
      #Throttle:

  # Functions
  
  ExampleFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './lambdas/example'
      Tags:
        Resource: !Sub '${Application}-example-function'
      Events:
        ApiExampleGetResource:
          Type: 'Api'
          Properties:
            Path: '/example'
            Method: 'GET'
            RestApiId: !Ref 'Api'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        # - Version: '2012-10-17'
        #   Statement:
        #     - Effect: 'Allow'
        #       Action:
        #         - ''
        #       Resource:
        #         - !Sub ''

  ExampleFunctionLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ExampleFunction}'
      RetentionInDays: 14
      
  # Compute
  
  ComputeStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: './compute.yml'
      Parameters:
        Application: !Sub '${Application}'
        Environment: !Sub '${Environment}'
        BuildRole: !Sub '${BuildRole}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-compute-stack'

  # Web
  
  WebStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: './web.yml'
      Parameters:
        Application: !Sub '${Application}'
        Environment: !Sub '${Environment}'
        DomainName: !Sub '${DomainName}'
        Api: !Sub '${Api}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-web-stack'

  # Analytics
  
  AnalyticsStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: './analytics.yml'
      Parameters:
        Application: !Sub '${Application}'
        Environment: !Sub '${Environment}'
        WebLogsBucket: !Sub '${WebStack.Outputs.WebLogsBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-analytics-stack'

  # Build

  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: 'daily-cleanup'
            Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-bucket'

  BuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-role'
  
  BuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${BuildProject}'
      
  BuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      TimeoutInMinutes: 180
      Artifacts:
        Type: 'NO_ARTIFACTS'
      Cache:
        # Type: 'NO_CACHE'
        Type: 'LOCAL'
        Modes:
          - 'LOCAL_DOCKER_LAYER_CACHE'
      ServiceRole: !Sub '${BuildRole.Arn}'
      Source:
        Location: !Sub '${GitHubRepo}'
        Type: 'GITHUB'
        GitCloneDepth: 0
        BuildSpec: 'build/buildspec.yml'
        Auth:
          Type: 'OAUTH'
      Triggers:
        Webhook: true
      Environment:
        # ComputeType: 'BUILD_GENERAL1_LARGE'
        # Image: 'aws/codebuild/amazonlinux2-aarch64-standard:1.0'
        # Type: 'ARM_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'DOMAIN_NAME'
            Value: !Sub '${DomainName}'
          - Name: 'GITHUB_REPO'
            Value: !Sub '${GitHubRepo}'
          - Name: 'ADMIN_EMAIL'
            Value: !Sub '${AdminEmail}'
          - Name: 'ADMIN_PHONE'
            Value: !Sub '${AdminPhone}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-project'
